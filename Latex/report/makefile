PROJECT = StudentThesis_Template
BUILD_DIRECTORY = .build
CWD = $(shell pwd)
# This is a simple makefile for compiling LaTeX documents. The core assumption
# is that the resulting documents should have any parameters effecting
# rendering quality set to theoretical limits and that all fonts should be
# embedded. While typically overkill, the detriment to doing so is negligible.

# Targets:
#	 quick:	   compiles pdf withou gloss / acros
#    default : compiles the document to a PDF file using the defined
#              latex generating engine. (pdflatex, pdflatex, etc)
#    display : displays the compiled document in a common PDF viewer.
#              (currently linux = evince, OSX = open)
#    clean   : removes the $(BUILD_DIRECTORY)/ directory holding temporary files


quick: $(BUILD_DIRECTORY)/$(PROJECT).pdf
	@$(FINALIZE)

default: $(BUILD_DIRECTORY)/$(PROJECT).acr $(BUILD_DIRECTORY)/$(PROJECT).pdf
	@$(FINALIZE)

display: default
	(${PDFVIEWER} $(PROJECT).pdf &)

### Compilation Flags
PDFLATEX_FLAGS  = -synctex=1 -output-directory=$(BUILD_DIRECTORY) -interaction=nonstopmode
#-halt-on-error

TEXINPUTS = .:$(BUILD_DIRECTORY)/
TEXMFOUTPUT = $(BUILD_DIRECTORY)/

### File Types (for dependancies)
TEX_FILES = $(shell find . -name '*.tex' -or -name '*.sty' -or -name '*.cls')
BIB_FILES = $(shell find . -name '*.bib')
BST_FILES = $(shell find . -name '*.bst')
IMG_FILES = $(shell find . -path '*.jpg' -or -path '*.png' -or \( \! -path './$(BUILD_DIRECTORY)/*.pdf' -path '*.pdf' \) )


### Standard PDF Viewers
# Defines a set of standard PDF viewer tools to use when displaying the result
# with the display target. Currently chosen are defaults which should work on
# most linux systems with GNOME installed and on all OSX systems.
UNAME := $(shell uname)

ifeq ($(UNAME), Linux)
PDFVIEWER = evince
endif

ifeq ($(UNAME), Darwin)
PDFVIEWER = open
endif


FINALIZE = cp $(BUILD_DIRECTORY)/$(PROJECT).pdf .

### Clean
# This target cleans the temporary files generated by the tex programs in
# use. All temporary files generated by this makefile will be placed in $(BUILD_DIRECTORY)/
# so cleanup is easy.

clean::
	rm -rf $(BUILD_DIRECTORY)

### Core Latex Generation
# Performs the typical build process for latex generations so that all
# references are resolved correctly. If adding components to this run-time
# always take caution and implement the worst case set of commands.
# Example: latex, bibtex, latex, latex
#
# Note the use of order-only prerequisites (prerequisites following the |).
# Order-only prerequisites do not effect the target -- if the order-only
# prerequisite has changed and none of the normal prerequisites have changed
# then this target IS NOT run.
#
# In order to function for projects which use a subset of the provided features
# it is important to verify that optional dependancies exist before calling a
# target; for instance, see how bibliography files (.bbl) are handled as a
# dependency.

$(BUILD_DIRECTORY)/:
	mkdir -p $(BUILD_DIRECTORY)/
	if [ ! -e $(BUILD_DIRECTORY)/refs ];then ln -s $(CWD)/refs $(BUILD_DIRECTORY)/refs;fi &>/dev/null

$(BUILD_DIRECTORY)/$(PROJECT).aux: $(TEX_FILES) $(IMG_FILES) | $(BUILD_DIRECTORY)/
	pdflatex $(PDFLATEX_FLAGS) $(PROJECT)

$(BUILD_DIRECTORY)/$(PROJECT).bbl: $(BIB_FILES) | $(BUILD_DIRECTORY)/$(PROJECT).aux
	cd $(BUILD_DIRECTORY) && bibtex $(PROJECT) && cd -
	pdflatex $(PDFLATEX_FLAGS) $(PROJECT)

$(BUILD_DIRECTORY)/$(PROJECT).acr: $(BUILD_DIRECTORY)/$(PROJECT).aux
	makeglossaries -d $(BUILD_DIRECTORY) $(PROJECT)
	pdflatex $(PDFLATEX_FLAGS) $(PROJECT)

$(BUILD_DIRECTORY)/$(PROJECT).pdf: $(BUILD_DIRECTORY)/$(PROJECT).aux $(if $(BIB_FILES), $(BUILD_DIRECTORY)/$(PROJECT).bbl) $(BUILD_DIRECTORY)/$(PROJECT).acr
	pdflatex $(PDFLATEX_FLAGS) $(PROJECT)
	
